function [rho,N,g,f] = CS5320_pms(I,S)
% CS5320_pms - recover surface properties using photometric stereo
% On input:
% I (nxnxk array): k nxn images of surface
% S (nx3 array): light source vectors
% On output:
% rho (nxn array): albedo values of surface
% N (nxnx3 array): surface normals
% g (nxnx3 array): surface description (= rho*N)
% f (xnx array): height map
% Call:
% Q = CS5320_ps_sphere(60);
% S1 = [0,0,1];
% I1 = CS5320_ps_render(Q,S1);
% S2 = [0.7,0.7,1];
% S2 = S2/norm(S2);
% I2 = CS5320_ps_render(Q,S2);
% S3 = [-0.7,-0.7,1];
% S3 = S3/norm(S3);
% I3 = CS5320_ps_render(Q,S3);
% S4 = [0.7,-0.7,1];
% S4 = S4/norm(S4);
% I4 = CS5320_ps_render(Q,S4);
% S5 = [-0.7,0.7,1];
% S5 = S5/norm(S5);
% I5 = CS5320_ps_render(Q,S5);
% S = [S1;S2;S3;S4;S5];
% I(:,:,1) = I1;
% I(:,:,2) = I2;
% I(:,:,3) = I3;
% I(:,:,4) = I4;
% I(:,:,5) = I5;
% [rho,N,G,f] = CS5320_pms(I,S);
% Author:
% Shantnu Kakkar
% UU
% Spring 2016
%

N = zeros(size(I,1) , size(I,2) , size(S,1)) ;

for i = 1:size(I,1) 
    for j = 1:size(I,2) 
        x(1:5,1) = I(i,j,1:5);
        G(i,j,1:3) =  S\x;
        temp(1:3,1) = G(i,j,1:3);
        rho(i,j) = norm(temp);
        if rho(i,j) > 0 && rho(i,j)  <= 1 
            N(i,j,1:3) = G(i,j,1:3)/rho(i,j);
        end
    end
end

x = 5;